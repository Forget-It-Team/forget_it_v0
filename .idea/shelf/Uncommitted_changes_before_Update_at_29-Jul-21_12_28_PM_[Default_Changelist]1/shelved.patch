Index: app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.android.forget_it_v0\r\n\r\nimport android.Manifest\r\nimport android.app.Dialog\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.RatingBar\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.cardview.widget.CardView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.android.forget_it_v0.adapter.UpcomingAdapter\r\nimport com.example.android.forget_it_v0.databinding.FragmentUpcomingRemindersBinding\r\n\r\nimport com.example.android.forget_it_v0.models.*\r\nimport com.example.android.forget_it_v0.repository.FirestoreRepo\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.text.FieldPosition\r\nimport java.time.LocalDateTime\r\nimport java.time.Month\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass UpcomingRemindersFragment : Fragment(), RecyclerViewOnClick {\r\n    private var size: Int = 0\r\n    private val PERMISSIONS_REQUEST_READ_CONTACTS = 1\r\n    private var upcomingReminderAdapter = UpcomingAdapter(arrayListOf<Pending>(), this)\r\n    private lateinit var upcomingDialog: Dialog\r\n    private lateinit var deadlineDialog: Dialog\r\n    private lateinit var dialogCompleted: Button\r\n    private lateinit var dialogDelete: Button\r\n    private lateinit var dialogYes: Button\r\n    private lateinit var dialogNo: Button\r\n    private lateinit var satisfy_rate_feedback : String\r\n    private lateinit var goals_problems_feedback : String\r\n    private lateinit var helpful_rate : String\r\n    private lateinit var confused_feedback : String\r\n    private lateinit var features_feedback : String\r\n    private lateinit var recommend_friend_rate_feedback : String\r\n    private lateinit var suggestion_feedback : String\r\n    private lateinit var price_willing : String\r\n    private var list: ArrayList<Pending> = arrayListOf()\r\n    private lateinit  var number: String\r\n    //    private var number : String = \"9307829766\"\r\n    private var auth: FirebaseAuth = Firebase.auth\r\n    private var  phone = auth.currentUser!!.phoneNumber\r\n\r\n//    var sampleImages = intArrayOf(\r\n//        R.drawable.one,\r\n//        R.drawable.two,\r\n//        R.drawable.three,\r\n//        R.drawable.four,\r\n//        R.drawable.five,\r\n//    )\r\n\r\n    private lateinit var binding: FragmentUpcomingRemindersBinding\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        Log.i(\"AUTH HOME\", auth.currentUser?.phoneNumber.toString())\r\n        binding.progressCircular.visibility = View.GONE\r\n\r\n        size = 0\r\n        list.clear()\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            addToList()\r\n        }\r\n\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            getPending()\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_upcoming_reminders,container,false)\r\n\r\n//        binding.carouselView.pageCount = sampleImages.size\r\n//        binding.carouselView.setImageListener { position, imageView ->\r\n//            imageView.setImageResource(sampleImages[position])}\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n\r\n        FirebaseMessaging.getInstance().subscribeToTopic(\"all\")\r\n        val sub_phone = phone!!.subSequence(3, 13)\r\n        FirebaseMessaging.getInstance().subscribeToTopic(sub_phone as String)\r\n\r\n\r\n\r\n        initView()\r\n        initRV()\r\n        daysInstalled()\r\n\r\n\r\n\r\n    }\r\n    private fun info(title: String, desc: String, pending: Pending){\r\n        val info =  Dialog(requireActivity())\r\n        info.setContentView(R.layout.info)\r\n        info.findViewById<TextView>(R.id.infoTitle).text = title\r\n        info.findViewById<TextView>(R.id.infoDesc).text = desc\r\n        info.show()\r\n        val backBtn = info.findViewById<CardView>(R.id.backButton)\r\n        backBtn.setOnClickListener{\r\n            info.dismiss()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private fun daysInstalled() {\r\n        val installed = Date(requireActivity().packageManager.getPackageInfo(requireActivity().packageName, 0).firstInstallTime)\r\n        val localTime = Date(System.currentTimeMillis())\r\n        val diff = localTime.time - installed.time\r\n        val days = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS)\r\n        if(days >= 1) {\r\n            checkFeedbackData()\r\n        }\r\n        return\r\n    }\r\n    private fun checkFeedbackData(){\r\n        val existingfeedback : ArrayList<String> = arrayListOf()\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            progressShow()\r\n            Firebase.firestore.collection(\"AlreadyFeedback\")\r\n                .get()\r\n                .addOnSuccessListener { data ->\r\n                    for (number in data) {\r\n                        existingfeedback.add(number.getString(\"number\").toString())\r\n                        Log.d(\"feedbacks\", number.getString(\"number\").toString())\r\n                    }\r\n                    if(!(existingfeedback.contains(phone.toString()))){\r\n                        Log.d(\"feedbacks\", \"Yes\")\r\n                        ratingDialog()\r\n                    }\r\n                }\r\n        }\r\n        return\r\n    }\r\n    private fun ratingDialog(){\r\n\r\n        val ask_for_feedback = Dialog(requireActivity())\r\n\r\n        ask_for_feedback.setContentView(R.layout.dialog_rate_your_experience)\r\n\r\n        val rateItNow = ask_for_feedback.findViewById<Button>(R.id.dialog_rate_it_now)\r\n\r\n        val remid_me_later = ask_for_feedback.findViewById<Button>(R.id.dialog_remind_me_later)\r\n\r\n        ask_for_feedback.show()\r\n        ask_for_feedback.setCanceledOnTouchOutside(false)\r\n        ask_for_feedback.setCancelable(false)\r\n\r\n        rateItNow.setOnClickListener {\r\n            satisfy_rate()\r\n            ask_for_feedback.dismiss()\r\n        }\r\n\r\n        remid_me_later.setOnClickListener {\r\n            ask_for_feedback.dismiss()\r\n        }\r\n    }\r\n    private fun satisfy_rate() {\r\n        val satisfy_rate_dialog = Dialog(requireActivity())\r\n        satisfy_rate_dialog.setContentView(R.layout.dialog_satisfy_rating_bar)\r\n        satisfy_rate_dialog.show()\r\n        satisfy_rate_dialog.setCanceledOnTouchOutside(false)\r\n        satisfy_rate_dialog.setCancelable(false)\r\n        val ratingBar = satisfy_rate_dialog.findViewById<RatingBar>(R.id.dialog_satisfy_rating_bar)\r\n        val next_button = satisfy_rate_dialog.findViewById<Button>(R.id.dialog_satify_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                satisfy_rate_feedback = ratingBar.rating.toString()\r\n                satisfy_rate_dialog.dismiss()\r\n                goals_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun goals_dialog(){\r\n        val goals_problems_feedback_dialog = Dialog(requireActivity())\r\n        goals_problems_feedback_dialog.setContentView(R.layout.dialog_feedback_goals)\r\n        goals_problems_feedback_dialog.show()\r\n        goals_problems_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        goals_problems_feedback_dialog.setCancelable(false)\r\n        val next_button = goals_problems_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedBack_goals_problems_text = goals_problems_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_goal)\r\n        next_button.setOnClickListener {\r\n            if(feedBack_goals_problems_text.text.isEmpty()){\r\n                feedBack_goals_problems_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                goals_problems_feedback = feedBack_goals_problems_text.text.trim().toString()\r\n                goals_problems_feedback_dialog.dismiss()\r\n                helpful_rate()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun helpful_rate() {\r\n        val helpful_rate_dialog = Dialog(requireActivity())\r\n        helpful_rate_dialog.setContentView(R.layout.dialog_solve_problem_rating_bar)\r\n        helpful_rate_dialog.show()\r\n        helpful_rate_dialog.setCanceledOnTouchOutside(false)\r\n        helpful_rate_dialog.setCancelable(false)\r\n        val ratingBar = helpful_rate_dialog.findViewById<RatingBar>(R.id.dialog_help_solve_problems_rating_bar)\r\n        val next_button = helpful_rate_dialog.findViewById<Button>(R.id.dialog_satify_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                helpful_rate = ratingBar.rating.toString()\r\n                helpful_rate_dialog.dismiss()\r\n                confused_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun confused_feedback_dialog(){\r\n        val confused_feedback_dialog = Dialog(requireActivity())\r\n        confused_feedback_dialog.setContentView(R.layout.dialog_feedback_confused)\r\n        confused_feedback_dialog.show()\r\n        confused_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        confused_feedback_dialog.setCancelable(false)\r\n        val next_button = confused_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = confused_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_confused_text)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                confused_feedback = feedback_confused_text.text.trim().toString()\r\n                confused_feedback_dialog.dismiss()\r\n                add_features_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private fun add_features_feedback_dialog(){\r\n        val add_features_feedback_dialog = Dialog(requireActivity())\r\n        add_features_feedback_dialog.setContentView(R.layout.dialog_feedback_features)\r\n        add_features_feedback_dialog.show()\r\n        add_features_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        add_features_feedback_dialog.setCancelable(false)\r\n        val next_button = add_features_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = add_features_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_features)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                features_feedback = feedback_confused_text.text.trim().toString()\r\n                add_features_feedback_dialog.dismiss()\r\n                willing_pay_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun willing_pay_feedback_dialog(){\r\n        val willing_pay_feedback_dialog = Dialog(requireActivity())\r\n        willing_pay_feedback_dialog.setContentView(R.layout.dialog_feedback_willing_pay)\r\n        willing_pay_feedback_dialog.show()\r\n        willing_pay_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        willing_pay_feedback_dialog.setCancelable(false)\r\n        val yes = willing_pay_feedback_dialog.findViewById<Button>(R.id.price_willing1)\r\n        val no = willing_pay_feedback_dialog.findViewById<Button>(R.id.price_willing2)\r\n        yes.setOnClickListener {\r\n            price_willing = \"Yes\"\r\n            willing_pay_feedback_dialog.dismiss()\r\n            recommend_friends_rate()\r\n        }\r\n        no.setOnClickListener {\r\n            price_willing = \"No\"\r\n            willing_pay_feedback_dialog.dismiss()\r\n            recommend_friends_rate()\r\n        }\r\n    }\r\n\r\n\r\n    private fun recommend_friends_rate() {\r\n        val satisfy_rate_dialog = Dialog(requireActivity())\r\n        satisfy_rate_dialog.setContentView(R.layout.dialog_feedback_recommend_friend)\r\n        satisfy_rate_dialog.show()\r\n        satisfy_rate_dialog.setCanceledOnTouchOutside(false)\r\n        satisfy_rate_dialog.setCancelable(false)\r\n        val ratingBar = satisfy_rate_dialog.findViewById<RatingBar>(R.id.dialog_satisfy_rating_bar)\r\n        val next_button = satisfy_rate_dialog.findViewById<Button>(R.id.dialog_recommend_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                recommend_friend_rate_feedback = ratingBar.rating.toString()\r\n                satisfy_rate_dialog.dismiss()\r\n                additional_suggestion_feedback()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun additional_suggestion_feedback() {\r\n        val dditional_suggestion_feedback_dialog = Dialog(requireActivity())\r\n        dditional_suggestion_feedback_dialog.setContentView(R.layout.dialog_feedback_additional_suggestion)\r\n        dditional_suggestion_feedback_dialog.show()\r\n        dditional_suggestion_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        dditional_suggestion_feedback_dialog.setCancelable(false)\r\n        val next_button = dditional_suggestion_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = dditional_suggestion_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_suggestion)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                suggestion_feedback = feedback_confused_text.text.trim().toString()\r\n                dditional_suggestion_feedback_dialog.dismiss()\r\n                addFeedback()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun addFeedback(){\r\n        val feedbackModel = Feedback_Model(\r\n            phone.toString(),\r\n            satisfy_rate_feedback,\r\n            goals_problems_feedback,\r\n            helpful_rate,\r\n            confused_feedback,\r\n            features_feedback,\r\n            price_willing,\r\n            recommend_friend_rate_feedback,\r\n            suggestion_feedback\r\n        )\r\n        val user = hashMapOf(\r\n            \"number\" to phone\r\n        )\r\n        progressShow()\r\n        Firebase.firestore.collection(\"AlreadyFeedback\").add(user)\r\n        Firebase.firestore.collection(\"Feedback\").document(phone.toString()).set(feedbackModel)\r\n        progressHide()\r\n        requireActivity().toast(\"Your feedback is recorded\")\r\n    }\r\n    private fun getPending() {\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            val firestoreRV = Firebase.firestore.collection(number).document(\"Upcoming\")\r\n                .collection(\"Pending\")\r\n\r\n            progressShow()\r\n\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n                    for (reminder in reminders)\r\n                        size++\r\n\r\n                    progressHide()\r\n                    Log.i(\"SIze IN\", size.toString())\r\n                    initBadge()\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun initView() {\r\n        number = requireActivity().intent.getStringExtra(\"number\").toString()\r\n\r\n        upcomingDialog = Dialog(requireActivity())\r\n        deadlineDialog = Dialog(requireActivity())\r\n        upcomingDialog.setContentView(R.layout.dialog_upcoming_reminders)\r\n        deadlineDialog.setContentView(R.layout.dialog_upcoming_deadline)\r\n\r\n        dialogCompleted = upcomingDialog.findViewById(R.id.upcoming_dialog_completed)\r\n        dialogDelete = upcomingDialog.findViewById(R.id.upcoming_dialog_delete)\r\n        dialogYes = deadlineDialog.findViewById(R.id.deadline_dialog_yes)\r\n        dialogNo = deadlineDialog.findViewById(R.id.deadline_dialog_no)\r\n\r\n        upcomingDialog.dismiss()\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    private fun initBadge() {\r\n//        Log.i(\"SIze out\", size.toString())\r\n//        val unread: String = size.toString()\r\n//\r\n//        when {\r\n//            size == 0 -> activity_home_pending_image_badge_tv.visibility = View.GONE\r\n//            size > 9 -> {\r\n//                activity_home_pending_image_badge_tv.visibility = View.VISIBLE\r\n//                activity_home_pending_image_badge_tv.text = \" 9+\"\r\n//            }\r\n//            else -> {\r\n//                activity_home_pending_image_badge_tv.visibility = View.VISIBLE\r\n//                activity_home_pending_image_badge_tv.text = \" $unread \"\r\n//            }\r\n//        }\r\n    }\r\n\r\n    private fun initRV() {\r\n        binding.upcomingRv.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.upcomingRv.adapter = upcomingReminderAdapter\r\n    }\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun addToList() {\r\n\r\n        var photo: Bitmap = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            val firestoreRV = Firebase.firestore.collection(number).document(\"Upcoming\")\r\n                .collection(\"Accepted\")\r\n            list.clear()\r\n            val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\r\n\r\n            progressShow()\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n                    for (reminder in reminders) {\r\n                        val pending = Pending(\r\n                            \"\",\r\n                            \"\",\r\n                            \"\",\r\n                            LocalDateTime.of(2001, Month.JULY, 29, 10, 10),\r\n                            photo,\r\n                            reminder.id\r\n                        )\r\n\r\n\r\n                        pending.from = reminder.getString(\"from\").toString()\r\n                        pending.task = reminder.getString(\"reminder\").toString()\r\n                        pending.name = reminder.getString(\"name\").toString()\r\n\r\n                        val time: LocalDateTime =\r\n                            LocalDateTime.parse(reminder.getString(\"date\").toString(), formatter)\r\n\r\n                        pending.date = time\r\n                        pending.image = photo\r\n\r\n                        if (pending.date.isBefore(LocalDateTime.now()))\r\n                            pending.pastDeadline = true\r\n\r\n                        list.add(pending)\r\n\r\n                    }\r\n                    upcomingReminderAdapter.updateList(list)\r\n                    progressHide()\r\n                }\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onClick(v: View, pending: Pending, position: Int) {\r\n        if (v.id == R.id.infoUpcoming_rv) {\r\n            val remin = pending.task.split(\";\").toTypedArray()\r\n            val title = remin[0]\r\n            val desc = remin[1]\r\n            info(title,desc,pending)\r\n            Log.i(\"ifelse\",\"if else is working\")\r\n\r\n        } else {\r\n            if (pending.pastDeadline) {\r\n                if (v.id == R.id.rv_markDone) {\r\n                    onYes(pending, position)\r\n                } else {\r\n                    onNo(pending, position)\r\n                }\r\n            } else {\r\n                if (v.id == R.id.rv_markDone) {\r\n                    onCompleted(pending, position)\r\n                } else {\r\n                    onDelete(pending, position)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onYes(pending: Pending, position: Int) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Completed\", pending.from, number, pending)\r\n        if(AudioPlayer.isPlaying()) {\r\n            AudioPlayer.stopAudio()\r\n        }\r\n        progressHide()\r\n        requireActivity().toast(\"You have completed this reminder. Congrats!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingReminderAdapter.notifyItemChanged(position)\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onNo(pending: Pending, position: Int) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Incomplete\", pending.from, number, pending)\r\n        progressHide()\r\n        if(AudioPlayer.isPlaying()) {\r\n            AudioPlayer.stopAudio()\r\n        }\r\n        requireActivity().toast(\"You have not completed this task. Better luck next time!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingReminderAdapter.notifyItemChanged(position)\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onDelete(pending: Pending, position: Int) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Deleted\", pending.from, number, pending)\r\n        progressHide()\r\n\r\n        requireActivity().toast(\"You have deleted this task. Better luck next time!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingReminderAdapter.notifyItemChanged(position)\r\n        upcomingDialog.dismiss()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onCompleted(pending: Pending, position: Int) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Completed\", pending.from, number, pending)\r\n        progressHide()\r\n\r\n        requireActivity().toast(\"You have completed this task. Well done!\")\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingReminderAdapter.notifyDataSetChanged()\r\n        upcomingDialog.dismiss()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private fun progressShow() {\r\n        binding.progressCircular.visibility = View.VISIBLE\r\n        requireActivity().window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\r\n        )\r\n    }\r\n\r\n    private fun progressHide() {\r\n        binding.progressCircular.visibility = View.GONE\r\n        requireActivity().window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt	(revision ca9dadb6486cf787aab83824260c94726c6d2ebb)
+++ app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt	(date 1627467420588)
@@ -61,9 +61,9 @@
     private lateinit var suggestion_feedback : String
     private lateinit var price_willing : String
     private var list: ArrayList<Pending> = arrayListOf()
-    private lateinit  var number: String
     //    private var number : String = "9307829766"
     private var auth: FirebaseAuth = Firebase.auth
+    private var number: String = auth.currentUser!!.phoneNumber.toString().subSequence(3,13).toString()
     private var  phone = auth.currentUser!!.phoneNumber
 
 //    var sampleImages = intArrayOf(
@@ -383,7 +383,7 @@
     }
 
     private fun initView() {
-        number = requireActivity().intent.getStringExtra("number").toString()
+//        number = requireActivity().intent.getStringExtra("number").toString()
 
         upcomingDialog = Dialog(requireActivity())
         deadlineDialog = Dialog(requireActivity())
@@ -468,6 +468,7 @@
 
                     }
                     upcomingReminderAdapter.updateList(list)
+                    Log.d("list", list.toString())
                     progressHide()
                 }
         }
Index: app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.android.forget_it_v0\r\n\r\nimport android.app.AlarmManager\r\nimport android.app.Dialog\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.ContactsContract\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.cardview.widget.CardView\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.android.forget_it_v0.adapter.PendingAdapter\r\nimport com.example.android.forget_it_v0.databinding.FragmentPendingRemindersBinding\r\nimport com.example.android.forget_it_v0.models.Pending\r\nimport com.example.android.forget_it_v0.models.RecyclerViewOnClickPending\r\nimport com.example.android.forget_it_v0.models.toast\r\nimport com.example.android.forget_it_v0.repository.FirestoreRepo\r\nimport com.example.android.forget_it_v0.models.MyAlarm\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.time.LocalDateTime\r\nimport java.time.Month\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.collections.HashMap\r\n\r\n\r\nclass PendingRemindersFragment : Fragment() , RecyclerViewOnClickPending {\r\n\r\n    private var alarmCount: Int = 0\r\n    private lateinit var pendingAdapter: PendingAdapter\r\n    private var pendingList: ArrayList<Pending> = arrayListOf()\r\n    private lateinit var rejectDialog: Dialog\r\n    private lateinit var dialogYes: Button\r\n    private lateinit var dialogNo: Button\r\n    private lateinit var number: String\r\n    private lateinit var id: String\r\n    private var hashMap: HashMap<String, String> = HashMap()\r\n    private lateinit var sharedPref: SharedPreferences\r\n    private var auth : FirebaseAuth = Firebase.auth\r\n    private lateinit var photo: Bitmap\r\n    private lateinit var binding : FragmentPendingRemindersBinding\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_pending_reminders,container,false)\r\n        initSharedPref()\r\n        initLayout()\r\n        initRV()\r\n        contacts()\r\n\r\n        auth = Firebase.auth\r\n        return binding.root\r\n    }\r\n    private fun info(pending: Pending){\r\n        val remin = pending.task.split(\";\").toTypedArray()\r\n        val title = remin[0]\r\n        val desc = remin[1]\r\n        val info =  Dialog(requireActivity())\r\n        info.setContentView(R.layout.info)\r\n        info.findViewById<TextView>(R.id.infoTitle).text = title\r\n        info.findViewById<TextView>(R.id.infoDesc).text = desc\r\n        info.show()\r\n        val backBtn = info.findViewById<CardView>(R.id.backButton)\r\n        backBtn.setOnClickListener{\r\n            info.dismiss()\r\n        }\r\n    }\r\n\r\n//    @RequiresApi(Build.VERSION_CODES.O)\r\n//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n//        initSharedPref()\r\n//        initLayout()\r\n//        initRV()\r\n//        contacts()\r\n//    }\r\n\r\n    private fun initSharedPref() {\r\n        sharedPref = requireActivity().getPreferences(Context.MODE_PRIVATE) ?: return\r\n        alarmCount = sharedPref.getInt(\"alarmCount\", 0)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun writeSharedPref() {\r\n        val sharedPreferences: SharedPreferences =\r\n            requireActivity().getSharedPreferences(\"pending contact\", Context.MODE_PRIVATE)\r\n        val editor: SharedPreferences.Editor = sharedPreferences.edit()\r\n        val gson = Gson()\r\n        val json: String = gson.toJson(hashMap)\r\n        editor.putString(\"pending contact list\", json)\r\n        editor.apply()\r\n        addData()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun loadSharedPref() {\r\n        val sharedPreferences: SharedPreferences =\r\n            requireActivity().getSharedPreferences(\"pending contact\", Context.MODE_PRIVATE)\r\n        val gson = Gson()\r\n        val json: String? = sharedPreferences.getString(\"pending contact list\", null)\r\n        val type = object : TypeToken<HashMap<String, String>>() {}.type\r\n\r\n        if (json == null)\r\n            contacts()\r\n        else {\r\n            Log.i(\"pending contacct\", json)\r\n            Log.i(\"pending contact\", \"Deep inside load Shared\")\r\n            hashMap = gson.fromJson(json, type)\r\n            Log.i(\"pending contact\", hashMap.toString())\r\n            addData()\r\n            binding.progressCircular.visibility = View.GONE\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun contacts(){\r\n        photo = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n        val cursor = requireActivity().contentResolver.query(\r\n            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,\r\n            null,\r\n            null,\r\n            null,\r\n            null\r\n        )\r\n        while (cursor?.moveToNext() == true) {\r\n            val name: String =\r\n                cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME))\r\n            var phoneNo: String =\r\n                cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))\r\n\r\n            Log.d(\"contact\", \"$name  $phoneNo\")\r\n            phoneNo = phoneNo.replace(\" \", \"\")\r\n            phoneNo = phoneNo.replace(\"+91\", \"\")\r\n            if (!hashMap.containsKey(phoneNo)) {\r\n                hashMap[phoneNo] = name\r\n            }\r\n        }\r\n        writeSharedPref()\r\n        progressHide()\r\n        hashMap[number] = \"Myself!\"\r\n    }\r\n\r\n    private fun initLayout() {\r\n        auth = Firebase.auth\r\n        number = auth.currentUser!!.phoneNumber!!.subSequence(3, 13).toString()\r\n\r\n        rejectDialog = Dialog(requireActivity())\r\n        rejectDialog.setContentView(R.layout.dialog_pending_reject)\r\n\r\n        dialogYes = rejectDialog.findViewById(R.id.reject_dialog_yes)\r\n        dialogNo = rejectDialog.findViewById(R.id.reject_dialog_no)\r\n\r\n        rejectDialog.dismiss()\r\n    }\r\n\r\n    private fun initRV() {\r\n        pendingAdapter = PendingAdapter(pendingList, this)\r\n        binding.pendingRv.layoutManager = LinearLayoutManager(requireActivity())\r\n        binding.pendingRv.adapter = pendingAdapter\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun addData() {\r\n        Log.i(\"pending contact\", \"inside add data\")\r\n        var photo: Bitmap = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            progressShow()\r\n            val firestoreRV = Firebase.firestore.collection(number)\r\n                .document(\"Upcoming\")\r\n                .collection(\"Pending\")\r\n\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n\r\n                    val formatter: DateTimeFormatter =\r\n                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\r\n\r\n                    for (reminder in reminders) {\r\n                        var pending =\r\n                            Pending(\r\n                                \"\",\r\n                                \"\",\r\n                                \"\",\r\n                                LocalDateTime.of(2001, Month.JULY, 29, 10, 10),\r\n                                photo,\r\n                                reminder.id\r\n                            )\r\n\r\n                        pending.from = reminder.getString(\"from\").toString()\r\n                        pending.task = reminder.getString(\"reminder\").toString()\r\n                        if (hashMap.containsKey(pending.from)) {\r\n                            pending.name = hashMap[pending.from].toString()\r\n\r\n                            firestoreRV\r\n                                .document(reminder.id)\r\n                                .update(\"name\", pending.name)\r\n                                .addOnSuccessListener {\r\n                                    Log.i(\"Done\", \"Updating\")\r\n                                }\r\n                        } else\r\n                            pending.name = reminder.getString(\"name\").toString()\r\n\r\n                        val time: LocalDateTime =\r\n                            LocalDateTime.parse(reminder.getString(\"date\").toString(), formatter)\r\n\r\n                        pending.date = time\r\n                        pending.image = photo\r\n                        pendingList.add(pending)\r\n                    }\r\n                    pendingAdapter.notifyDataSetChanged()\r\n                    progressHide()\r\n                }\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onClick(view: View, pending: Pending) {\r\n\r\n        when (view.id) {\r\n            R.id.infoButtonPending -> info(pending)\r\n            R.id.pending_rv_reject -> onReject(pending)\r\n            R.id.pending_rv_accept -> onAccept(pending)\r\n        }\r\n\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onReject(pending: Pending) {\r\n        rejectDialog.show()\r\n        dialogYes.setOnClickListener {\r\n            progressShow()\r\n            FirestoreRepo.swapData(\"Pending\", \"Rejected\", pending.from, number, pending)\r\n            progressHide()\r\n\r\n            pendingList.remove(pending)\r\n            pendingAdapter.notifyDataSetChanged()\r\n            rejectDialog.dismiss()\r\n        }\r\n\r\n        dialogNo.setOnClickListener {\r\n            rejectDialog.dismiss()\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onAccept(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Pending\", \"Accepted\", pending.from, number, pending)\r\n\r\n        pendingList.remove(pending)\r\n//        addData()\r\n        pendingAdapter.notifyDataSetChanged()\r\n        //adds an alarm\r\n\r\n        progressShow()\r\n\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.set(\r\n            pending.date.year,\r\n            pending.date.monthValue - 1,\r\n            pending.date.dayOfMonth,\r\n            pending.date.hour,\r\n            pending.date.minute,\r\n            0\r\n        )\r\n\r\n        Log.i(\"HERE\", \"onaccept\")\r\n\r\n        setAlarmCode(calendar.timeInMillis)\r\n        progressHide()\r\n    }\r\n\r\n    private var alarmManager = arrayOfNulls<AlarmManager>(1000)\r\n\r\n    @RequiresApi(Build.VERSION_CODES.KITKAT)\r\n    private fun setAlarmCode(timeInMillis: Long) {\r\n\r\n        Log.i(\"HERE\", \"setalarm\")\r\n\r\n        alarmManager[alarmCount] = requireActivity().getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n\r\n        Log.i(\"Test emulator\", alarmManager[alarmCount].toString())\r\n        val intent = Intent(requireContext(), MyAlarm::class.java)\r\n        val pendingIntent: PendingIntent = PendingIntent.getBroadcast(requireActivity(), alarmCount, intent, 0)\r\n\r\n        alarmManager[alarmCount]?.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            Log.i(\"Test emulator time\", alarmManager[alarmCount]?.nextAlarmClock.toString())\r\n        }\r\n\r\n        requireActivity().toast(\"Alarm is set\")\r\n\r\n        alarmCount++\r\n        if (alarmCount == 999)\r\n            alarmCount = 0\r\n\r\n        with(sharedPref.edit()) {\r\n            putInt(\"alarmCount\", alarmCount)\r\n            commit()\r\n        }\r\n\r\n    }\r\n\r\n    private fun progressShow() {\r\n        binding.progressCircular.visibility = View.VISIBLE\r\n        requireActivity().window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\r\n        )\r\n    }\r\n\r\n    private fun progressHide() {\r\n        binding.progressCircular.visibility = View.GONE\r\n        requireActivity().window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt	(revision ca9dadb6486cf787aab83824260c94726c6d2ebb)
+++ app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt	(date 1627476915525)
@@ -94,14 +94,6 @@
         }
     }
 
-//    @RequiresApi(Build.VERSION_CODES.O)
-//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-//        initSharedPref()
-//        initLayout()
-//        initRV()
-//        contacts()
-//    }
-
     private fun initSharedPref() {
         sharedPref = requireActivity().getPreferences(Context.MODE_PRIVATE) ?: return
         alarmCount = sharedPref.getInt("alarmCount", 0)
@@ -119,28 +111,6 @@
         addData()
     }
 
-    @RequiresApi(Build.VERSION_CODES.O)
-    private fun loadSharedPref() {
-        val sharedPreferences: SharedPreferences =
-            requireActivity().getSharedPreferences("pending contact", Context.MODE_PRIVATE)
-        val gson = Gson()
-        val json: String? = sharedPreferences.getString("pending contact list", null)
-        val type = object : TypeToken<HashMap<String, String>>() {}.type
-
-        if (json == null)
-            contacts()
-        else {
-            Log.i("pending contacct", json)
-            Log.i("pending contact", "Deep inside load Shared")
-            hashMap = gson.fromJson(json, type)
-            Log.i("pending contact", hashMap.toString())
-            addData()
-            binding.progressCircular.visibility = View.GONE
-        }
-
-    }
-
-
 
     @RequiresApi(Build.VERSION_CODES.O)
     private fun contacts(){
@@ -210,7 +180,7 @@
                 .orderBy("date")
                 .get()
                 .addOnSuccessListener { reminders ->
-
+                    pendingList.clear()
                     val formatter: DateTimeFormatter =
                         DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")
 
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_26-07-2021_21_56__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_26-07-2021_21_56__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_28-07-2021_12_42__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_28-07-2021_12_42__Default_Changelist_.xml
