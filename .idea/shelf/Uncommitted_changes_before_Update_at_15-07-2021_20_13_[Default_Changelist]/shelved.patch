Index: app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.android.forget_it_v0\r\n\r\nimport android.Manifest\r\nimport android.app.Dialog\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport androidx.fragment.app.Fragment\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.RatingBar\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.android.forget_it_v0.adapter.UpcomingAdapter\r\nimport com.example.android.forget_it_v0.databinding.FragmentOtpBinding\r\nimport com.example.android.forget_it_v0.databinding.FragmentUpcomingRemindersBinding\r\nimport com.example.android.forget_it_v0.models.*\r\nimport com.example.android.forget_it_v0.repository.FirestoreRepo\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.messaging.FirebaseMessaging\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.time.LocalDateTime\r\nimport java.time.Month\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\nimport java.util.concurrent.TimeUnit\r\n\r\n\r\n\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass UpcomingRemindersFragment : Fragment(), RecyclerViewOnClick {\r\n    private var size: Int = 0\r\n    private val PERMISSIONS_REQUEST_READ_CONTACTS = 1\r\n    private var upcomingReminderAdapter = UpcomingAdapter(arrayListOf<Pending>(), this)\r\n    private lateinit var upcomingDialog: Dialog\r\n    private lateinit var deadlineDialog: Dialog\r\n    private lateinit var dialogCompleted: Button\r\n    private lateinit var dialogDelete: Button\r\n    private lateinit var dialogYes: Button\r\n    private lateinit var dialogNo: Button\r\n    private lateinit var satisfy_rate_feedback : String\r\n    private lateinit var goals_problems_feedback : String\r\n    private lateinit var helpful_rate : String\r\n    private lateinit var confused_feedback : String\r\n    private lateinit var features_feedback : String\r\n    private lateinit var recommend_friend_rate_feedback : String\r\n    private lateinit var suggestion_feedback : String\r\n    private lateinit var price_willing : String\r\n    private var list: ArrayList<Pending> = arrayListOf()\r\n    private lateinit  var number: String\r\n    //    private var number : String = \"9307829766\"\r\n    private var auth: FirebaseAuth = Firebase.auth\r\n    private var  phone = auth.currentUser!!.phoneNumber\r\n\r\n    private lateinit var binding: FragmentUpcomingRemindersBinding\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        Log.i(\"AUTH HOME\", auth.currentUser?.phoneNumber.toString())\r\n        binding.progressCircular.visibility = View.GONE\r\n\r\n        size = 0\r\n        list.clear()\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            addToList()\r\n        }\r\n\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            getPending()\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_upcoming_reminders,container,false)\r\n\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        FirebaseMessaging.getInstance().subscribeToTopic(\"all\")\r\n        val sub_phone = phone!!.subSequence(3, 13)\r\n        FirebaseMessaging.getInstance().subscribeToTopic(sub_phone as String)\r\n\r\n\r\n        requestContactPermission()\r\n        initView()\r\n        initRV()\r\n        daysInstalled()\r\n    }\r\n\r\n    private fun daysInstalled() {\r\n        val installed = Date(requireActivity().packageManager.getPackageInfo(requireActivity().packageName, 0).firstInstallTime)\r\n        val localTime = Date(System.currentTimeMillis())\r\n        val diff = localTime.time - installed.time\r\n        val days = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS)\r\n        if(days >= 1) {\r\n            checkFeedbackData()\r\n        }\r\n        return\r\n    }\r\n    private fun checkFeedbackData(){\r\n        val existingfeedback : ArrayList<String> = arrayListOf()\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            progressShow()\r\n            Firebase.firestore.collection(\"AlreadyFeedback\")\r\n                .get()\r\n                .addOnSuccessListener { data ->\r\n                    for (number in data) {\r\n                        existingfeedback.add(number.getString(\"number\").toString())\r\n                        Log.d(\"feedbacks\", number.getString(\"number\").toString())\r\n                    }\r\n                    if(!(existingfeedback.contains(phone.toString()))){\r\n                        Log.d(\"feedbacks\", \"Yes\")\r\n                        ratingDialog()\r\n                    }\r\n                }\r\n        }\r\n        return\r\n    }\r\n    private fun ratingDialog(){\r\n\r\n        val ask_for_feedback = Dialog(requireActivity())\r\n\r\n        ask_for_feedback.setContentView(R.layout.dialog_rate_your_experience)\r\n\r\n        val rateItNow = ask_for_feedback.findViewById<Button>(R.id.dialog_rate_it_now)\r\n\r\n        val remid_me_later = ask_for_feedback.findViewById<Button>(R.id.dialog_remind_me_later)\r\n\r\n        ask_for_feedback.show()\r\n        ask_for_feedback.setCanceledOnTouchOutside(false)\r\n        ask_for_feedback.setCancelable(false)\r\n\r\n        rateItNow.setOnClickListener {\r\n            satisfy_rate()\r\n            ask_for_feedback.dismiss()\r\n        }\r\n\r\n        remid_me_later.setOnClickListener {\r\n            ask_for_feedback.dismiss()\r\n        }\r\n    }\r\n    private fun satisfy_rate() {\r\n        val satisfy_rate_dialog = Dialog(requireActivity())\r\n        satisfy_rate_dialog.setContentView(R.layout.dialog_satisfy_rating_bar)\r\n        satisfy_rate_dialog.show()\r\n        satisfy_rate_dialog.setCanceledOnTouchOutside(false)\r\n        satisfy_rate_dialog.setCancelable(false)\r\n        val ratingBar = satisfy_rate_dialog.findViewById<RatingBar>(R.id.dialog_satisfy_rating_bar)\r\n        val next_button = satisfy_rate_dialog.findViewById<Button>(R.id.dialog_satify_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                satisfy_rate_feedback = ratingBar.rating.toString()\r\n                satisfy_rate_dialog.dismiss()\r\n                goals_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun goals_dialog(){\r\n        val goals_problems_feedback_dialog = Dialog(requireActivity())\r\n        goals_problems_feedback_dialog.setContentView(R.layout.dialog_feedback_goals)\r\n        goals_problems_feedback_dialog.show()\r\n        goals_problems_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        goals_problems_feedback_dialog.setCancelable(false)\r\n        val next_button = goals_problems_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedBack_goals_problems_text = goals_problems_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_goal)\r\n        next_button.setOnClickListener {\r\n            if(feedBack_goals_problems_text.text.isEmpty()){\r\n                feedBack_goals_problems_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                goals_problems_feedback = feedBack_goals_problems_text.text.trim().toString()\r\n                goals_problems_feedback_dialog.dismiss()\r\n                helpful_rate()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun helpful_rate() {\r\n        val helpful_rate_dialog = Dialog(requireActivity())\r\n        helpful_rate_dialog.setContentView(R.layout.dialog_solve_problem_rating_bar)\r\n        helpful_rate_dialog.show()\r\n        helpful_rate_dialog.setCanceledOnTouchOutside(false)\r\n        helpful_rate_dialog.setCancelable(false)\r\n        val ratingBar = helpful_rate_dialog.findViewById<RatingBar>(R.id.dialog_help_solve_problems_rating_bar)\r\n        val next_button = helpful_rate_dialog.findViewById<Button>(R.id.dialog_satify_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                helpful_rate = ratingBar.rating.toString()\r\n                helpful_rate_dialog.dismiss()\r\n                confused_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun confused_feedback_dialog(){\r\n        val confused_feedback_dialog = Dialog(requireActivity())\r\n        confused_feedback_dialog.setContentView(R.layout.dialog_feedback_confused)\r\n        confused_feedback_dialog.show()\r\n        confused_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        confused_feedback_dialog.setCancelable(false)\r\n        val next_button = confused_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = confused_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_confused_text)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                confused_feedback = feedback_confused_text.text.trim().toString()\r\n                confused_feedback_dialog.dismiss()\r\n                add_features_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private fun add_features_feedback_dialog(){\r\n        val add_features_feedback_dialog = Dialog(requireActivity())\r\n        add_features_feedback_dialog.setContentView(R.layout.dialog_feedback_features)\r\n        add_features_feedback_dialog.show()\r\n        add_features_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        add_features_feedback_dialog.setCancelable(false)\r\n        val next_button = add_features_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = add_features_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_features)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                features_feedback = feedback_confused_text.text.trim().toString()\r\n                add_features_feedback_dialog.dismiss()\r\n                willing_pay_feedback_dialog()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun willing_pay_feedback_dialog(){\r\n        val willing_pay_feedback_dialog = Dialog(requireActivity())\r\n        willing_pay_feedback_dialog.setContentView(R.layout.dialog_feedback_willing_pay)\r\n        willing_pay_feedback_dialog.show()\r\n        willing_pay_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        willing_pay_feedback_dialog.setCancelable(false)\r\n        val yes = willing_pay_feedback_dialog.findViewById<Button>(R.id.price_willing1)\r\n        val no = willing_pay_feedback_dialog.findViewById<Button>(R.id.price_willing2)\r\n        yes.setOnClickListener {\r\n            price_willing = \"Yes\"\r\n            willing_pay_feedback_dialog.dismiss()\r\n            recommend_friends_rate()\r\n        }\r\n        no.setOnClickListener {\r\n            price_willing = \"No\"\r\n            willing_pay_feedback_dialog.dismiss()\r\n            recommend_friends_rate()\r\n        }\r\n    }\r\n\r\n\r\n    private fun recommend_friends_rate() {\r\n        val satisfy_rate_dialog = Dialog(requireActivity())\r\n        satisfy_rate_dialog.setContentView(R.layout.dialog_feedback_recommend_friend)\r\n        satisfy_rate_dialog.show()\r\n        satisfy_rate_dialog.setCanceledOnTouchOutside(false)\r\n        satisfy_rate_dialog.setCancelable(false)\r\n        val ratingBar = satisfy_rate_dialog.findViewById<RatingBar>(R.id.dialog_satisfy_rating_bar)\r\n        val next_button = satisfy_rate_dialog.findViewById<Button>(R.id.dialog_recommend_rating_button_next)\r\n        next_button.setOnClickListener {\r\n            if(!(ratingBar.rating == 0.0f)){\r\n                recommend_friend_rate_feedback = ratingBar.rating.toString()\r\n                satisfy_rate_dialog.dismiss()\r\n                additional_suggestion_feedback()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun additional_suggestion_feedback() {\r\n        val dditional_suggestion_feedback_dialog = Dialog(requireActivity())\r\n        dditional_suggestion_feedback_dialog.setContentView(R.layout.dialog_feedback_additional_suggestion)\r\n        dditional_suggestion_feedback_dialog.show()\r\n        dditional_suggestion_feedback_dialog.setCanceledOnTouchOutside(false)\r\n        dditional_suggestion_feedback_dialog.setCancelable(false)\r\n        val next_button = dditional_suggestion_feedback_dialog.findViewById<Button>(R.id.dialog_feedback_goal_next)\r\n        val feedback_confused_text = dditional_suggestion_feedback_dialog.findViewById<EditText>(R.id.dialog_feedback_suggestion)\r\n        next_button.setOnClickListener {\r\n            if(feedback_confused_text.text.isEmpty()){\r\n                feedback_confused_text.error = \"Don't leave field empty\"\r\n            }else{\r\n                suggestion_feedback = feedback_confused_text.text.trim().toString()\r\n                dditional_suggestion_feedback_dialog.dismiss()\r\n                addFeedback()\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun addFeedback(){\r\n        val feedbackModel = Feedback_Model(\r\n            phone.toString(),\r\n            satisfy_rate_feedback,\r\n            goals_problems_feedback,\r\n            helpful_rate,\r\n            confused_feedback,\r\n            features_feedback,\r\n            price_willing,\r\n            recommend_friend_rate_feedback,\r\n            suggestion_feedback\r\n        )\r\n        val user = hashMapOf(\r\n            \"number\" to phone\r\n        )\r\n        progressShow()\r\n        Firebase.firestore.collection(\"AlreadyFeedback\").add(user)\r\n        Firebase.firestore.collection(\"Feedback\").document(phone.toString()).set(feedbackModel)\r\n        progressHide()\r\n        requireActivity().toast(\"Your feedback is recorded\")\r\n    }\r\n    private fun getPending() {\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            val firestoreRV = Firebase.firestore.collection(number).document(\"Upcoming\")\r\n                .collection(\"Pending\")\r\n\r\n            progressShow()\r\n\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n                    for (reminder in reminders)\r\n                        size++\r\n\r\n                    progressHide()\r\n                    Log.i(\"SIze IN\", size.toString())\r\n                    initBadge()\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun initView() {\r\n        number = requireActivity().intent.getStringExtra(\"number\").toString()\r\n\r\n        upcomingDialog = Dialog(requireActivity())\r\n        deadlineDialog = Dialog(requireActivity())\r\n        upcomingDialog.setContentView(R.layout.dialog_upcoming_reminders)\r\n        deadlineDialog.setContentView(R.layout.dialog_upcoming_deadline)\r\n\r\n        dialogCompleted = upcomingDialog.findViewById(R.id.upcoming_dialog_completed)\r\n        dialogDelete = upcomingDialog.findViewById(R.id.upcoming_dialog_delete)\r\n        dialogYes = deadlineDialog.findViewById(R.id.deadline_dialog_yes)\r\n        dialogNo = deadlineDialog.findViewById(R.id.deadline_dialog_no)\r\n\r\n        upcomingDialog.dismiss()\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    private fun initBadge() {\r\n//        Log.i(\"SIze out\", size.toString())\r\n//        val unread: String = size.toString()\r\n//\r\n//        when {\r\n//            size == 0 -> activity_home_pending_image_badge_tv.visibility = View.GONE\r\n//            size > 9 -> {\r\n//                activity_home_pending_image_badge_tv.visibility = View.VISIBLE\r\n//                activity_home_pending_image_badge_tv.text = \" 9+\"\r\n//            }\r\n//            else -> {\r\n//                activity_home_pending_image_badge_tv.visibility = View.VISIBLE\r\n//                activity_home_pending_image_badge_tv.text = \" $unread \"\r\n//            }\r\n//        }\r\n    }\r\n\r\n    private fun initRV() {\r\n        binding.upcomingRv.layoutManager = LinearLayoutManager(requireContext())\r\n        binding.upcomingRv.adapter = upcomingReminderAdapter\r\n    }\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun addToList() {\r\n\r\n        var photo: Bitmap = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            val firestoreRV = Firebase.firestore.collection(number).document(\"Upcoming\")\r\n                .collection(\"Accepted\")\r\n\r\n            val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\r\n\r\n            progressShow()\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n                    for (reminder in reminders) {\r\n                        val pending = Pending(\r\n                            \"\",\r\n                            \"\",\r\n                            \"\",\r\n                            LocalDateTime.of(2001, Month.JULY, 29, 10, 10),\r\n                            photo,\r\n                            reminder.id\r\n                        )\r\n\r\n\r\n                        pending.from = reminder.getString(\"from\").toString()\r\n                        pending.task = reminder.getString(\"reminder\").toString()\r\n                        pending.name = reminder.getString(\"name\").toString()\r\n\r\n                        val time: LocalDateTime =\r\n                            LocalDateTime.parse(reminder.getString(\"date\").toString(), formatter)\r\n\r\n                        pending.date = time\r\n                        pending.image = photo\r\n\r\n                        if (pending.date.isBefore(LocalDateTime.now()))\r\n                            pending.pastDeadline = true\r\n\r\n                        list.add(pending)\r\n\r\n                    }\r\n                    upcomingReminderAdapter.updateList(list)\r\n                    progressHide()\r\n                }\r\n        }\r\n    }\r\n\r\n    private fun requestContactPermission() {\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                if (ContextCompat.checkSelfPermission(\r\n                        requireContext(),\r\n                        Manifest.permission.READ_CONTACTS\r\n                    ) != PackageManager.PERMISSION_GRANTED\r\n                ) {\r\n                    if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                            requireActivity(),\r\n                            Manifest.permission.READ_CONTACTS\r\n                        )\r\n                    ) {\r\n                        val builder: android.app.AlertDialog.Builder =\r\n                            android.app.AlertDialog.Builder(requireContext())\r\n                        builder.setTitle(\"Read Contacts permission\")\r\n                        builder.setPositiveButton(android.R.string.ok, null)\r\n                        builder.setMessage(\"Please enable access to contacts.\")\r\n                        builder.setOnDismissListener {\r\n                            requestPermissions(\r\n                                arrayOf(Manifest.permission.READ_CONTACTS),\r\n                                PERMISSIONS_REQUEST_READ_CONTACTS\r\n                            )\r\n                        }\r\n                        builder.show()\r\n                    } else {\r\n                        ActivityCompat.requestPermissions(\r\n                            requireActivity(), arrayOf(Manifest.permission.READ_CONTACTS),\r\n                            PERMISSIONS_REQUEST_READ_CONTACTS\r\n                        )\r\n                    }\r\n                } else {\r\n//                    home_constraint.visibility = View.VISIBLE\r\n//                    home_warning.visibility = View.GONE\r\n//                    home_rv.visibility = View.VISIBLE\r\n//                    home_upcoming_text.visibility = View.VISIBLE\r\n                }\r\n            } else {\r\n                requireActivity().toast(\"Permission to read contacts has been granted\")\r\n//                home_constraint.visibility = View.VISIBLE\r\n//                home_warning.visibility = View.GONE\r\n//                home_rv.visibility = View.VISIBLE\r\n//                home_upcoming_text.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            when (requestCode) {\r\n                PERMISSIONS_REQUEST_READ_CONTACTS -> {\r\n                    if (grantResults.isNotEmpty()\r\n                        && grantResults[0] == PackageManager.PERMISSION_GRANTED\r\n                    ) {\r\n//                        home_constraint.visibility = View.VISIBLE\r\n//                        home_warning.visibility = View.GONE\r\n//                        home_rv.visibility = View.VISIBLE\r\n//                        home_upcoming_text.visibility = View.VISIBLE\r\n                    } else {\r\n                        requireContext().toast(\"Please do not deny, otherwise you won't be able to use the app and connect with your friends\")\r\n//                        home_constraint.visibility = View.GONE\r\n//                        home_warning.visibility = View.VISIBLE\r\n//                        home_rv.visibility = View.GONE\r\n//                        home_upcoming_text.visibility = View.GONE\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onClick(v: View, pending: Pending) {\r\n        if (pending.pastDeadline) {\r\n            if(v.id == R.id.rv_markDone) {\r\n                onYes(pending)\r\n            }else {\r\n                onNo(pending)\r\n            }\r\n        } else {\r\n            if(v.id == R.id.rv_markDone) {\r\n                onCompleted(pending)\r\n            }else {\r\n                onDelete(pending)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun onYes(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Completed\", pending.from, number, pending)\r\n        if(AudioPlayer.isPlaying()) {\r\n            AudioPlayer.stopAudio()\r\n        }\r\n        progressHide()\r\n        requireActivity().toast(\"You have completed this reminder. Congrats!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    private fun onNo(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Incomplete\", pending.from, number, pending)\r\n        progressHide()\r\n        if(AudioPlayer.isPlaying()) {\r\n            AudioPlayer.stopAudio()\r\n        }\r\n        requireActivity().toast(\"You have not completed this task. Better luck next time!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        deadlineDialog.dismiss()\r\n    }\r\n\r\n    private fun onDelete(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Deleted\", pending.from, number, pending)\r\n        progressHide()\r\n\r\n        requireActivity().toast(\"You have deleted this task. Better luck next time!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingDialog.dismiss()\r\n    }\r\n\r\n    private fun onCompleted(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Accepted\", \"Completed\", pending.from, number, pending)\r\n        progressHide()\r\n\r\n        requireActivity().toast(\"You have completed this task. Well done!\")\r\n\r\n        list.remove(pending)\r\n        upcomingReminderAdapter.updateList(list)\r\n        upcomingDialog.dismiss()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private fun progressShow() {\r\n        binding.progressCircular.visibility = View.VISIBLE\r\n        requireActivity().window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\r\n        )\r\n    }\r\n\r\n    private fun progressHide() {\r\n        binding.progressCircular.visibility = View.GONE\r\n        requireActivity().window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ app/src/main/java/com/example/android/forget_it_v0/UpcomingRemindersFragment.kt	(date 1626356978908)
@@ -2,7 +2,6 @@
 
 import android.Manifest
 import android.app.Dialog
-import android.content.Intent
 import android.content.pm.PackageManager
 import android.graphics.Bitmap
 import android.graphics.BitmapFactory
@@ -10,7 +9,6 @@
 import android.os.Bundle
 import android.util.Log
 import android.view.*
-import androidx.fragment.app.Fragment
 import android.widget.Button
 import android.widget.EditText
 import android.widget.RatingBar
@@ -18,9 +16,9 @@
 import androidx.core.app.ActivityCompat
 import androidx.core.content.ContextCompat
 import androidx.databinding.DataBindingUtil
+import androidx.fragment.app.Fragment
 import androidx.recyclerview.widget.LinearLayoutManager
 import com.example.android.forget_it_v0.adapter.UpcomingAdapter
-import com.example.android.forget_it_v0.databinding.FragmentOtpBinding
 import com.example.android.forget_it_v0.databinding.FragmentUpcomingRemindersBinding
 import com.example.android.forget_it_v0.models.*
 import com.example.android.forget_it_v0.repository.FirestoreRepo
@@ -29,6 +27,7 @@
 import com.google.firebase.firestore.ktx.firestore
 import com.google.firebase.ktx.Firebase
 import com.google.firebase.messaging.FirebaseMessaging
+import com.synnapps.carouselview.CarouselView
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.GlobalScope
 import kotlinx.coroutines.launch
@@ -39,8 +38,6 @@
 import java.util.concurrent.TimeUnit
 
 
-
-
 @Suppress("DEPRECATION")
 class UpcomingRemindersFragment : Fragment(), RecyclerViewOnClick {
     private var size: Int = 0
@@ -65,6 +62,15 @@
     //    private var number : String = "9307829766"
     private var auth: FirebaseAuth = Firebase.auth
     private var  phone = auth.currentUser!!.phoneNumber
+    var carouselView: CarouselView? = null
+
+    var sampleImages = intArrayOf(
+        R.drawable.one,
+        R.drawable.two,
+        R.drawable.three,
+        R.drawable.four,
+        R.drawable.five
+    )
 
     private lateinit var binding: FragmentUpcomingRemindersBinding
     @RequiresApi(Build.VERSION_CODES.O)
@@ -91,22 +97,34 @@
     ): View? {
         binding = DataBindingUtil.inflate(inflater,R.layout.fragment_upcoming_reminders,container,false)
 
+        binding.carouselView.pageCount = sampleImages.size
+        binding.carouselView.setImageListener { position, imageView ->
+            imageView.setImageResource(sampleImages[position])}
+
         return binding.root
     }
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
+
         FirebaseMessaging.getInstance().subscribeToTopic("all")
         val sub_phone = phone!!.subSequence(3, 13)
         FirebaseMessaging.getInstance().subscribeToTopic(sub_phone as String)
 
 
+
+
         requestContactPermission()
         initView()
         initRV()
         daysInstalled()
+
+
+
     }
+
+
 
     private fun daysInstalled() {
         val installed = Date(requireActivity().packageManager.getPackageInfo(requireActivity().packageName, 0).firstInstallTime)
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'com.google.gms.google-services'\r\n    // Adding the apply plugin statement for safeargs\r\n    id 'kotlin-kapt'\r\n    id 'androidx.navigation.safeargs'\r\n\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.android.forget_it_v0\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        multiDexEnabled true\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n    buildFeatures{\r\n        dataBinding = true\r\n    }\r\n\r\n\r\n}\r\n\r\ndependencies {\r\n\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.6.0'\r\n    implementation 'androidx.appcompat:appcompat:1.3.0'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'\r\n    implementation 'androidx.fragment:fragment-ktx:1.2.5'\r\n    testImplementation 'junit:junit:4.13.2'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n    implementation(\"androidx.navigation:navigation-fragment-ktx:2.3.5\")\r\n    implementation(\"androidx.navigation:navigation-ui-ktx:2.3.5\")\r\n    implementation (\"androidx.multidex:multidex:2.0.1\")\r\n    //Firebase tools\r\n    implementation 'com.google.firebase:firebase-analytics:19.0.0'\r\n    implementation \"com.google.firebase:firebase-auth-ktx:21.0.1\"\r\n    implementation 'com.google.firebase:firebase-messaging-ktx:22.0.0'\r\n    implementation 'com.google.firebase:firebase-firestore-ktx:23.0.1'\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ app/build.gradle	(date 1626355775513)
@@ -9,6 +9,7 @@
 }
 
 android {
+
     compileSdkVersion 30
     buildToolsVersion "30.0.3"
 
@@ -67,5 +68,7 @@
     implementation "com.google.firebase:firebase-auth-ktx:21.0.1"
     implementation 'com.google.firebase:firebase-messaging-ktx:22.0.0'
     implementation 'com.google.firebase:firebase-firestore-ktx:23.0.1'
+//carousel view
+    implementation 'com.synnapps:carouselview:0.1.4'
 }
 
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.android.forget_it_v0\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\r\n    <uses-permission android:name=\"android.permission.READ_CONTACTS\"/>\r\n\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.ForgetitV0\">\r\n\r\n        <activity android:name=\".ReportActivity\" />\r\n        <activity android:name=\".MainActivity\" />\r\n        <activity android:name=\".AuthenticationActivity\" />\r\n        <activity android:name=\".splashActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n        <receiver\r\n            android:name=\".models.MyAlarm\"\r\n            android:enabled=\"true\"\r\n            android:exported=\"true\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ app/src/main/AndroidManifest.xml	(date 1626358471181)
@@ -8,6 +8,8 @@
 
 
     <application
+        android:largeHeap="true"
+        android:hardwareAccelerated="false"
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    ext.kotlin_version = \"1.5.20\"\r\n    ext.nav_version = \"2.3.5\"\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:4.2.2\"\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n        classpath 'com.google.gms:google-services:4.3.8'\r\n        classpath(\"androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version\")\r\n    }\r\n\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n        jcenter() // Warning: this repository is going to shut down soon\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ build.gradle	(date 1626353527938)
@@ -20,6 +20,7 @@
         google()
         mavenCentral()
         jcenter() // Warning: this repository is going to shut down soon
+
     }
 }
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"11\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ .idea/gradle.xml	(date 1626355612340)
@@ -1,13 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
         <option name="testRunner" value="PLATFORM" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="11" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle.properties	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ gradle.properties	(date 1626356234152)
@@ -14,6 +14,8 @@
 # AndroidX package structure to make it clearer which packages are bundled with the
 # Android operating system, and which are packaged with your app"s APK
 # https://developer.android.com/topic/libraries/support-library/androidx-rn
-android.useAndroidX=true
 # Kotlin code style for this project: "official" or "obsolete":
-kotlin.code.style=official
\ No newline at end of file
+kotlin.code.style=official
+android.useAndroidX=true
+# Automatically convert third-party libraries to use AndroidX
+android.enableJetifier=true
Index: app/src/main/res/layout/fragment_upcoming_reminders.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/textview_upcoming_reminder\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"Upcoming Reminders\"\r\n            android:textColor=\"#828282\"\r\n            android:textSize=\"20sp\"\r\n            android:fontFamily=\"@font/montserrat_regular\"\r\n            android:lineHeight=\"24dp\"\r\n            app:layout_constraintLeft_toLeftOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            android:layout_marginStart=\"20dp\"\r\n            android:layout_marginTop=\"35dp\"\r\n            android:layout_marginLeft=\"20dp\" />\r\n\r\n\r\n        <ProgressBar\r\n            android:id=\"@+id/progress_circular\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintRight_toRightOf=\"parent\"\r\n            app:layout_constraintLeft_toLeftOf=\"parent\"\r\n            android:background=\"@drawable/circle_background\" />\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/upcoming_rv\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginTop=\"25dp\"\r\n            app:layout_constraintTop_toBottomOf=\"@id/textview_upcoming_reminder\"\r\n            app:layout_constraintRight_toRightOf=\"parent\"\r\n            app:layout_constraintLeft_toLeftOf=\"parent\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\" />\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_upcoming_reminders.xml	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ app/src/main/res/layout/fragment_upcoming_reminders.xml	(date 1626354271232)
@@ -2,6 +2,23 @@
 <layout xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools">
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+        <com.synnapps.carouselview.CarouselView
+            android:id="@+id/carouselView"
+            android:layout_width="match_parent"
+            android:layout_height="150dp"
+            app:fillColor="#FFFFFFFF"
+            app:pageColor="#00000000"
+            app:radius="6dp"
+            app:slideInterval="3000"
+            app:strokeColor="#FF777777"
+            app:strokeWidth="1dp"/>
+
+
+
 
 
     <androidx.constraintlayout.widget.ConstraintLayout
@@ -44,4 +61,5 @@
             app:layout_constraintLeft_toLeftOf="parent"
             app:layout_constraintBottom_toBottomOf="parent" />
     </androidx.constraintlayout.widget.ConstraintLayout>
+    </LinearLayout>
 </layout>
\ No newline at end of file
Index: app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.android.forget_it_v0\r\n\r\nimport android.app.AlarmManager\r\nimport android.app.Dialog\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.provider.ContactsContract\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.WindowManager\r\nimport android.widget.Button\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.android.forget_it_v0.adapter.PendingAdapter\r\nimport com.example.android.forget_it_v0.databinding.FragmentPendingRemindersBinding\r\nimport com.example.android.forget_it_v0.models.Pending\r\nimport com.example.android.forget_it_v0.models.RecyclerViewOnClickPending\r\nimport com.example.android.forget_it_v0.models.toast\r\nimport com.example.android.forget_it_v0.repository.FirestoreRepo\r\nimport com.example.android.forget_it_v0.models.MyAlarm\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport java.time.LocalDateTime\r\nimport java.time.Month\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.collections.HashMap\r\n\r\n\r\nclass PendingRemindersFragment : Fragment() , RecyclerViewOnClickPending {\r\n\r\n    private var alarmCount: Int = 0\r\n    private lateinit var pendingAdapter: PendingAdapter\r\n    private var pendingList: ArrayList<Pending> = arrayListOf()\r\n    private lateinit var rejectDialog: Dialog\r\n    private lateinit var dialogYes: Button\r\n    private lateinit var dialogNo: Button\r\n    private lateinit var number: String\r\n    private lateinit var id: String\r\n    private var hashMap: HashMap<String, String> = HashMap()\r\n    private lateinit var sharedPref: SharedPreferences\r\n    private var auth : FirebaseAuth = Firebase.auth\r\n    private lateinit var photo: Bitmap\r\n    private lateinit var binding : FragmentPendingRemindersBinding\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        binding = DataBindingUtil.inflate(inflater,R.layout.fragment_pending_reminders,container,false)\r\n        initSharedPref()\r\n        initLayout()\r\n        initRV()\r\n        contacts()\r\n        return binding.root\r\n    }\r\n\r\n//    @RequiresApi(Build.VERSION_CODES.O)\r\n//    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n//        initSharedPref()\r\n//        initLayout()\r\n//        initRV()\r\n//        contacts()\r\n//    }\r\n\r\n    private fun initSharedPref() {\r\n        sharedPref = requireActivity().getPreferences(Context.MODE_PRIVATE) ?: return\r\n        alarmCount = sharedPref.getInt(\"alarmCount\", 0)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun writeSharedPref() {\r\n        val sharedPreferences: SharedPreferences =\r\n            requireActivity().getSharedPreferences(\"pending contact\", Context.MODE_PRIVATE)\r\n        val editor: SharedPreferences.Editor = sharedPreferences.edit()\r\n        val gson = Gson()\r\n        val json: String = gson.toJson(hashMap)\r\n        editor.putString(\"pending contact list\", json)\r\n        editor.apply()\r\n        addData()\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun loadSharedPref() {\r\n        val sharedPreferences: SharedPreferences =\r\n            requireActivity().getSharedPreferences(\"pending contact\", Context.MODE_PRIVATE)\r\n        val gson = Gson()\r\n        val json: String? = sharedPreferences.getString(\"pending contact list\", null)\r\n        val type = object : TypeToken<HashMap<String, String>>() {}.type\r\n\r\n        if (json == null)\r\n            contacts()\r\n        else {\r\n            Log.i(\"pending contacct\", json)\r\n            Log.i(\"pending contact\", \"Deep inside load Shared\")\r\n            hashMap = gson.fromJson(json, type)\r\n            Log.i(\"pending contact\", hashMap.toString())\r\n            addData()\r\n            binding.progressCircular.visibility = View.GONE\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun contacts(){\r\n        photo = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n        val cursor = requireActivity().contentResolver.query(\r\n            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,\r\n            null,\r\n            null,\r\n            null,\r\n            null\r\n        )\r\n        while (cursor?.moveToNext() == true) {\r\n            val name: String =\r\n                cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME))\r\n            var phoneNo: String =\r\n                cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))\r\n\r\n            Log.d(\"contact\", \"$name  $phoneNo\")\r\n            phoneNo = phoneNo.replace(\" \", \"\")\r\n            phoneNo = phoneNo.replace(\"+91\", \"\")\r\n            if (!hashMap.containsKey(phoneNo)) {\r\n                hashMap[phoneNo] = name\r\n            }\r\n        }\r\n        writeSharedPref()\r\n        progressHide()\r\n        hashMap[number] = \"Myself!\"\r\n    }\r\n\r\n    private fun initLayout() {\r\n        number = auth.currentUser!!.phoneNumber!!.subSequence(3, 13).toString()\r\n\r\n        rejectDialog = Dialog(requireActivity())\r\n        rejectDialog.setContentView(R.layout.dialog_pending_reject)\r\n\r\n        dialogYes = rejectDialog.findViewById(R.id.reject_dialog_yes)\r\n        dialogNo = rejectDialog.findViewById(R.id.reject_dialog_no)\r\n\r\n        rejectDialog.dismiss()\r\n    }\r\n\r\n    private fun initRV() {\r\n        pendingAdapter = PendingAdapter(pendingList, this)\r\n        binding.pendingRv.layoutManager = LinearLayoutManager(requireActivity())\r\n        binding.pendingRv.adapter = pendingAdapter\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun addData() {\r\n        Log.i(\"pending contact\", \"inside add data\")\r\n        var photo: Bitmap = BitmapFactory.decodeResource(\r\n            requireActivity().resources,\r\n            R.drawable.person\r\n        )\r\n\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            progressShow()\r\n            val firestoreRV = Firebase.firestore.collection(number)\r\n                .document(\"Upcoming\")\r\n                .collection(\"Pending\")\r\n\r\n            firestoreRV\r\n                .orderBy(\"date\")\r\n                .get()\r\n                .addOnSuccessListener { reminders ->\r\n\r\n                    val formatter: DateTimeFormatter =\r\n                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")\r\n\r\n                    for (reminder in reminders) {\r\n                        var pending =\r\n                            Pending(\r\n                                \"\",\r\n                                \"\",\r\n                                \"\",\r\n                                LocalDateTime.of(2001, Month.JULY, 29, 10, 10),\r\n                                photo,\r\n                                reminder.id\r\n                            )\r\n\r\n                        pending.from = reminder.getString(\"from\").toString()\r\n                        pending.task = reminder.getString(\"reminder\").toString()\r\n                        if (hashMap.containsKey(pending.from)) {\r\n                            pending.name = hashMap[pending.from].toString()\r\n\r\n                            firestoreRV\r\n                                .document(reminder.id)\r\n                                .update(\"name\", pending.name)\r\n                                .addOnSuccessListener {\r\n                                    Log.i(\"Done\", \"Updating\")\r\n                                }\r\n                        } else\r\n                            pending.name = reminder.getString(\"name\").toString()\r\n\r\n                        val time: LocalDateTime =\r\n                            LocalDateTime.parse(reminder.getString(\"date\").toString(), formatter)\r\n\r\n                        pending.date = time\r\n                        pending.image = photo\r\n                        pendingList.add(pending)\r\n                    }\r\n                    pendingAdapter.notifyDataSetChanged()\r\n                    progressHide()\r\n                }\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onClick(view: View, pending: Pending) {\r\n        when (view.id) {\r\n            R.id.pending_rv_reject -> onReject(pending)\r\n            R.id.pending_rv_accept -> onAccept(pending)\r\n        }\r\n\r\n    }\r\n\r\n    private fun onReject(pending: Pending) {\r\n        rejectDialog.show()\r\n        dialogYes.setOnClickListener {\r\n            progressShow()\r\n            FirestoreRepo.swapData(\"Pending\", \"Rejected\", pending.from, number, pending)\r\n            progressHide()\r\n\r\n            pendingList.remove(pending)\r\n            pendingAdapter.notifyDataSetChanged()\r\n            rejectDialog.dismiss()\r\n        }\r\n\r\n        dialogNo.setOnClickListener {\r\n            rejectDialog.dismiss()\r\n        }\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun onAccept(pending: Pending) {\r\n        progressShow()\r\n        FirestoreRepo.swapData(\"Pending\", \"Accepted\", pending.from, number, pending)\r\n\r\n        pendingList.remove(pending)\r\n        pendingAdapter.notifyDataSetChanged()\r\n\r\n        //adds an alarm\r\n\r\n        progressShow()\r\n\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.set(\r\n            pending.date.year,\r\n            pending.date.monthValue - 1,\r\n            pending.date.dayOfMonth,\r\n            pending.date.hour,\r\n            pending.date.minute,\r\n            0\r\n        )\r\n\r\n        Log.i(\"HERE\", \"onaccept\")\r\n\r\n        setAlarmCode(calendar.timeInMillis)\r\n        progressHide()\r\n    }\r\n\r\n    private var alarmManager = arrayOfNulls<AlarmManager>(1000)\r\n\r\n    @RequiresApi(Build.VERSION_CODES.KITKAT)\r\n    private fun setAlarmCode(timeInMillis: Long) {\r\n\r\n        Log.i(\"HERE\", \"setalarm\")\r\n\r\n        alarmManager[alarmCount] = requireActivity().getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n\r\n        Log.i(\"Test emulator\", alarmManager[alarmCount].toString())\r\n        val intent = Intent(requireContext(), MyAlarm::class.java)\r\n        val pendingIntent: PendingIntent = PendingIntent.getBroadcast(requireActivity(), alarmCount, intent, 0)\r\n\r\n        alarmManager[alarmCount]?.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, pendingIntent)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            Log.i(\"Test emulator time\", alarmManager[alarmCount]?.nextAlarmClock.toString())\r\n        }\r\n\r\n        requireActivity().toast(\"Alarm is set\")\r\n\r\n        alarmCount++\r\n        if (alarmCount == 999)\r\n            alarmCount = 0\r\n\r\n        with(sharedPref.edit()) {\r\n            putInt(\"alarmCount\", alarmCount)\r\n            commit()\r\n        }\r\n\r\n    }\r\n\r\n    private fun progressShow() {\r\n        binding.progressCircular.visibility = View.VISIBLE\r\n        requireActivity().window.setFlags(\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,\r\n            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE\r\n        )\r\n    }\r\n\r\n    private fun progressHide() {\r\n        binding.progressCircular.visibility = View.GONE\r\n        requireActivity().window.clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ app/src/main/java/com/example/android/forget_it_v0/PendingRemindersFragment.kt	(date 1626353503986)
@@ -73,6 +73,8 @@
         initLayout()
         initRV()
         contacts()
+
+        auth = Firebase.auth
         return binding.root
     }
 
@@ -156,6 +158,7 @@
     }
 
     private fun initLayout() {
+        auth = Firebase.auth
         number = auth.currentUser!!.phoneNumber!!.subSequence(3, 13).toString()
 
         rejectDialog = Dialog(requireActivity())
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ .idea/vcs.xml	(date 1626355612308)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision f37ded2d5a160b26022afe78e3ae99e54e4d6ba3)
+++ .idea/misc.xml	(date 1626355625726)
@@ -1,4 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="JDK" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
 </project>
\ No newline at end of file
Index: app/src/main/res/transition/transition.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/transition/transition.xml	(date 1626353527968)
+++ app/src/main/res/transition/transition.xml	(date 1626353527968)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<transitionManager xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:motion="http://schemas.android.com/apk/res-auto">
+    <Transition
+        motion:constraintSetStart="@id/start"
+        motion:constraintSetEnd="@+id/next"
+        motion:duration="1000"
+        android:id="@+id/forward">
+        <OnSwipe
+            motion:dragDirection="dragLeft"
+            motion:touchAnchorSide="left" />
+    </Transition>
+
+    <Transition
+        motion:constraintSetStart="@+id/start"
+        motion:constraintSetEnd="@+id/previous"
+        android:id="@+id/backward">
+        <OnSwipe
+            motion:dragDirection="dragRight"
+            motion:touchAnchorSide="right" />
+    </Transition>
+
+</transitionManager>
\ No newline at end of file
diff --git app/src/main/res/drawable-v24/circle_background.xml app/src/main/res/drawable/circle_background.xml
rename from app/src/main/res/drawable-v24/circle_background.xml
rename to app/src/main/res/drawable/circle_background.xml
diff --git app/src/main/res/drawable-v24/upcoming_rv_border_red.xml app/src/main/res/drawable/upcoming_rv_border_red.xml
rename from app/src/main/res/drawable-v24/upcoming_rv_border_red.xml
rename to app/src/main/res/drawable/upcoming_rv_border_red.xml
diff --git app/src/main/res/drawable-v24/dialog_feedback_edittext_background.xml app/src/main/res/drawable/dialog_feedback_edittext_background.xml
rename from app/src/main/res/drawable-v24/dialog_feedback_edittext_background.xml
rename to app/src/main/res/drawable/dialog_feedback_edittext_background.xml
diff --git app/src/main/res/drawable-v24/ic_launcher_foreground.xml app/src/main/res/drawable/ic_launcher_foreground.xml
rename from app/src/main/res/drawable-v24/ic_launcher_foreground.xml
rename to app/src/main/res/drawable/ic_launcher_foreground.xml
